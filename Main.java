import java.util.*;
import java.io.*;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // --- –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤): ");
        String username = scanner.nextLine().trim();
        if (username.isEmpty()) username = "player";
        String saveFile = "save_" + username + ".sav";

        // --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
        while (true) {
            System.out.println("\n1. –ù–æ–≤–∞—è –∏–≥—Ä–∞");
            System.out.println("2. –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç");
            System.out.println("3. –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É");
            System.out.println("4. –†–µ–∫–æ—Ä–¥—ã");
            System.out.println("5. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º: ");
            String menuChoice = scanner.nextLine().trim();

            if (menuChoice.equals("4")) {
                RecordsManager.showTopRecords(5);
                continue;
            }

            if (menuChoice.equals("5")) {
                System.out.println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                break;
            }

            boolean gameOver = false;
            int turn = 1;
            Hero player = null;
            EnemyHero enemy = null;
            GameMap map = null;
            Castle playerCastle = null;
            Castle enemyCastle = null;
            String mapFile = "";

            if (menuChoice.equals("2")) {
                // --- –†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ä—Ç ---
                GameMapEditor editor = new GameMapEditor();
                editor.editorMenu();
                continue;
            }

            if (menuChoice.equals("3")) {
                // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                try {
                    SavedGame save = SaveUtils.loadGame(saveFile);
                    turn = save.turn;
                    player = save.player;
                    enemy = save.enemy;
                    map = save.map;
                    playerCastle = save.playerCastle;
                    enemyCastle = save.enemyCastle;
                    System.out.println("–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + username + "!");
                } catch (Exception e) {
                    System.out.println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã: " + e.getMessage());
                    continue;
                }
            } else if (menuChoice.equals("1")) {
                // --- –ù–æ–≤–∞—è –∏–≥—Ä–∞ ---
                System.out.print("–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å –æ–≥—É—Ä–µ—á–Ω–æ–≥–æ –¥–æ–∂–¥—è (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.15): ");
                double cucumberRainChance = 0.1;
                try {
                    cucumberRainChance = Double.parseDouble(scanner.nextLine().trim());
                } catch (Exception e) {
                    System.out.println("–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%");
                }

                System.out.print("–í–≤–µ–¥–∏—Ç–µ —à–∞–Ω—Å –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—É—Ä—Ü–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.25): ");
                double cucumberPoisonChance = 0.25;
                try {
                    cucumberPoisonChance = Double.parseDouble(scanner.nextLine().trim());
                } catch (Exception e) {
                    System.out.println("–í–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞–Ω—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.25 (25%)");
                }

                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∫–∞—Ä—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π): ");
                mapFile = scanner.nextLine().trim();

                if (!mapFile.isEmpty()) {
                    GameMapEditor editor = new GameMapEditor();
                    GameMap loaded = editor.loadMap(mapFile);
                    if (loaded != null) {
                        map = loaded;
                    } else {
                        System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ 10x10.");
                        map = new GameMap(10, 10);
                    }
                } else {
                    map = new GameMap(10, 10);
                }

                map.setCucumberRainChance(cucumberRainChance);
                map.setCucumberPoisonChance(cucumberPoisonChance);

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–º–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
                if (map.castles != null && !map.castles.isEmpty()) {
                    for (Castle c : map.castles) {
                        if (c.getCode() == 'C') playerCastle = c;
                        if (c.getCode() == 'E') enemyCastle = c;
                    }
                }
                if (playerCastle == null) {
                    playerCastle = Castle.createPlayerCastle(0, 0);
                    map.addCastle(playerCastle);
                }
                if (enemyCastle == null) {
                    enemyCastle = Castle.createEnemyCastle(
                            map.grid[0].length - 1, map.grid.length - 1);
                    map.addCastle(enemyCastle);
                }

                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ—Ä–æ–µ–≤ (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏)
                player = new Hero(1, 1, 'H', map.grid[0].length - 1, map.grid.length - 1, 15);
                enemy = new EnemyHero(map.grid[0].length - 2, map.grid.length - 2, 'V',
                        map.grid[0].length - 1, map.grid.length - 1);
                map.addCharacter(player);
                map.addCharacter(enemy);

                System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: WASD (–æ–¥–∏–Ω–æ—á–Ω—ã–µ/–∫–æ–º–±–∏–Ω–∞—Ü–∏–∏),");
                System.out.println("E - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥, Q - –≤—ã—Ö–æ–¥, save - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É");
                System.out.println("–ï—Å–ª–∏ —Å—Ç–æ–∏—Ç ü•í ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å—Ç—É–ø–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É –∏ –≥–µ—Ä–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—ä–µ—Å—Ç –æ–≥—É—Ä–µ—Ü!");
            } else {
                System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º!");
                continue;
            }

            // --- –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª ---
            while (!gameOver) {
                System.out.println("\n=== –•–æ–¥ #" + turn + " ===");
                map.display();
                System.out.println("–®–∞–≥–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: " + player.getSteps());
                System.out.print("–í–≤–æ–¥: ");
                String input = scanner.nextLine().trim().toLowerCase();

                if (input.equals("q")) {
                    System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...");
                    break;
                }
                if (input.equals("save")) {
                    try {
                        SavedGame save = new SavedGame();
                        save.turn = turn;
                        save.player = player;
                        save.enemy = enemy;
                        save.map = map;
                        save.playerCastle = playerCastle;
                        save.enemyCastle = enemyCastle;
                        SaveUtils.saveGame(save, saveFile);
                        System.out.println("–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + username + "!");
                    } catch (Exception e) {
                        System.out.println("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + e.getMessage());
                    }
                    continue;
                }

                boolean validInput = false;
                String endTurnReason = null;

                switch (input) {
                    case "w" -> validInput = player.moveBy(0, -1, map);
                    case "s" -> validInput = player.moveBy(0, 1, map);
                    case "a" -> validInput = player.moveBy(-1, 0, map);
                    case "d" -> validInput = player.moveBy(1, 0, map);
                    case "wa", "aw" -> validInput = player.moveBy(-1, -1, map);
                    case "wd", "dw" -> validInput = player.moveBy(1, -1, map);
                    case "sa", "as" -> validInput = player.moveBy(-1, 1, map);
                    case "sd", "ds" -> validInput = player.moveBy(1, 1, map);
                    case "e" -> endTurnReason = "–î–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ";
                    case "army" -> player.showArmy();
                    default -> System.out.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞");
                }

                if (player.getX() == enemyCastle.getX() && player.getY() == enemyCastle.getY()) {
                    System.out.println("\n=== –ü–û–ë–ï–î–ê! –í—ã –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ –≤—Ä–∞–∂–µ—Å–∫–∏–π –∑–∞–º–æ–∫! ===");
                    map.display();
                    // –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤:
                    int destroyed = player.getEnemiesDefeated(); // —Ä–µ–∞–ª–∏–∑—É–π —ç—Ç–æ—Ç —Å—á–µ—Ç—á–∏–∫ –≤ Hero
                    int score = 1000 - (turn * 10) + destroyed * 50;
                    RecordsManager.addRecord(new RecordEntry(
                            username, score, mapFile.isEmpty() ? "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è" : mapFile, turn, destroyed
                    ));
                    System.out.println("–í–∞—à —Å—á–µ—Ç: " + score);
                    System.out.println("–†–µ–∫–æ—Ä–¥—ã:");
                    RecordsManager.showTopRecords(5);
                    gameOver = true;
                    break;
                }

                if (validInput && player.getSteps() == 0) {
                    endTurnReason = "–ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —à–∞–≥–∏";
                }

                if (endTurnReason != null) {
                    // –•–æ–¥ –≤—Ä–∞–≥–∞
                    enemy.moveTowardsPlayerCastle(playerCastle);

                    if (enemy.getX() == playerCastle.getX() && enemy.getY() == playerCastle.getY()) {
                        System.out.println("\n=== –ü–û–†–ê–ñ–ï–ù–ò–ï! –í—Ä–∞–≥ –∑–∞—Ö–≤–∞—Ç–∏–ª –≤–∞—à –∑–∞–º–æ–∫! ===");
                        map.display();
                        gameOver = true;
                        break;
                    }

                    player.endTurn();

                    // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤—ã–∑–≤–∞—Ç—å –æ–≥—É—Ä–µ—á–Ω—ã–π –¥–æ–∂–¥—å —Å –∑–∞–¥–∞–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
                    map.tryTriggerCucumberRain();

                    System.out.println("\n=== " + endTurnReason + "! –í—Ä–∞–≥ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ (" +
                            enemy.getX() + "," + enemy.getY() + ") ===");

                    turn++;
                }

                if (!map.getCharacters().contains(enemy)) {
                    System.out.println("\n=== –ü–û–ë–ï–î–ê! –í—ã —É–Ω–∏—á—Ç–æ–∂–∏–ª–∏ –≤—Ä–∞–∂–µ—Å–∫–æ–≥–æ –≥–µ—Ä–æ—è! ===");
                    map.display();
                    // –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤:
                    int destroyed = player.getEnemiesDefeated(); // —Ä–µ–∞–ª–∏–∑—É–π —ç—Ç–æ—Ç —Å—á–µ—Ç—á–∏–∫ –≤ Hero
                    int score = 1000 - (turn * 10) + destroyed * 50;
                    RecordsManager.addRecord(new RecordEntry(
                            username, score, mapFile.isEmpty() ? "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è" : mapFile, turn, destroyed
                    ));
                    System.out.println("–í–∞—à —Å—á–µ—Ç: " + score);
                    System.out.println("–†–µ–∫–æ—Ä–¥—ã:");
                    RecordsManager.showTopRecords(5);
                    gameOver = true;
                    break;
                }
            }
        }
        scanner.close();
    }
}