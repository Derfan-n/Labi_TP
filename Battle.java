import java.io.Serializable;
import java.util.*;

class Battle implements Serializable {
    private static final int BATTLE_WIDTH = 8;
    private static final int BATTLE_HEIGHT = 8;

    private final Hero hero;
    private final EnemyHero enemy;
    private final List<BattleUnit> playerUnits = new ArrayList<>();
    private final List<BattleUnit> enemyUnits = new ArrayList<>();
    private final List<BattleUnit> resurrectedZombies = new ArrayList<>();
    private boolean isPlayerTurn = true;
    private boolean cucumberPoisoned = false;
    private Random random = new Random();

    public Battle(Hero hero, EnemyHero enemy) {
        this.hero = hero;
        this.enemy = enemy;
        initializeUnits();
        placeUnits();
    }

    public void setCucumberPoisoned(boolean val) {
        this.cucumberPoisoned = val;
    }

    private void initializeUnits() {
        for (Map.Entry<String, Integer> entry : hero.getArmy().entrySet()) {
            BattleUnit unit = createUnit(entry.getKey(), entry.getValue());
            if (unit != null) playerUnits.add(unit);
        }
        enemyUnits.add(new BattleUnit("–ì–æ–±–ª–∏–Ω", "üë∫", 20, 3, 1, 2, 5));
        enemyUnits.add(new BattleUnit("–û—Ä–∫", "üëπ", 30, 5, 1, 1, 3));
    }

    private BattleUnit createUnit(String name, int count) {
        return switch (name) {
            case "–ö–æ–ø–µ–π—â–∏–∫" -> new BattleUnit(name, "üó°Ô∏è", 100, 15, 1, 2, count);
            case "–õ—É—á–Ω–∏–∫" -> new BattleUnit(name, "üèπ", 50, 20, 3, 3, count);
            case "–í—Å–∞–¥–Ω–∏–∫" -> new BattleUnit(name, "üêé", 120, 25, 1, 4, count);
            default -> null;
        };
    }

    private void placeUnits() {
        int index = 0;
        for (BattleUnit unit : playerUnits) {
            unit.setX(0);
            unit.setY(1 + index * 2);
            index++;
        }
        index = 0;
        for (BattleUnit unit : enemyUnits) {
            unit.setX(BATTLE_WIDTH - 1);
            unit.setY(1 + index * 2);
            index++;
        }
        if (!resurrectedZombies.isEmpty()) {
            int zombieIndex = 0;
            for (BattleUnit zombie : resurrectedZombies) {
                zombie.setX(0);
                zombie.setY(1 + (playerUnits.size() + zombieIndex) * 2);
                zombieIndex++;
            }
        }
    }

    public boolean start(Scanner scanner, GameMap map) {
        if (cucumberPoisoned) {
            resurrectFallenUnitsAsZombies(hero.getLastFallenUnits());
            cucumberPoisoned = false;
            hero.clearLastFallenUnits();
            placeUnits();
        }
        while (!isBattleOver()) {
            if (isPlayerTurn) {
                playerTurn(scanner);
            } else {
                enemyTurn();
                printBattleField();
            }
            cucumberZombieHpDrain();
            isPlayerTurn = !isPlayerTurn;
            resetUnits();
        }
        return handleBattleEnd(map);
    }

    private void cucumberZombieHpDrain() {
        int aliveZombies = (int) resurrectedZombies.stream().filter(BattleUnit::isAlive).count();
        if (aliveZombies == 0) return;
        for (BattleUnit unit : playerUnits) {
            if (unit.isAlive()) {
                unit.takeDamage(5 * aliveZombies);
            }
        }
        System.out.println("–ó–æ–º–±–∏-—é–Ω–∏—Ç—ã –∏—Å—Ç–æ—â–∞—é—Ç –≤–∞—à—É –∞—Ä–º–∏—é! –ö–∞–∂–¥—ã–π –æ–±—ã—á–Ω—ã–π —Å—Ç–µ–∫ —Ç–µ—Ä—è–µ—Ç " + (5 * aliveZombies) + " HP.");
    }

    private List<BattleUnit> getAllPlayerControlledUnits() {
        List<BattleUnit> all = new ArrayList<>(playerUnits);
        all.addAll(resurrectedZombies);
        return all;
    }

    private void playerTurn(Scanner scanner) {
        System.out.println("\n=== –í–ê–® –•–û–î ===");
        // –¢–æ–ª—å–∫–æ –∂–∏–≤—ã–µ –∏ –Ω–µ –ø–æ—Ö–æ–¥–∏–≤—à–∏–µ —é–Ω–∏—Ç—ã!
        List<BattleUnit> availableUnits = new ArrayList<>();
        for (BattleUnit unit : getAllPlayerControlledUnits()) {
            if (unit.isAlive() && !unit.hasActed()) {
                availableUnits.add(unit);
            }
        }

        while (!availableUnits.isEmpty()) {
            printBattleField();
            // –£–±—Ä–∞—Ç—å –º–µ—Ä—Ç–≤—ã—Ö —é–Ω–∏—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã–±–æ—Ä–æ–º
            availableUnits.removeIf(unit -> !unit.isAlive());
            if (availableUnits.isEmpty()) break;

            System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç–∞:");
            for (int i = 0; i < availableUnits.size(); i++) {
                BattleUnit unit = availableUnits.get(i);
                System.out.printf("%d. %s %s (HP: %d, –ö–æ–ª-–≤–æ: %d, –ê—Ç–∞–∫–∞: %d, –î–∞–ª—å–Ω–æ—Å—Ç—å: %d, –®–∞–≥–∏: %d)%n",
                        i + 1, unit.getEmoji(), unit.getName(),
                        unit.getTotalHp(), unit.getCount(),
                        unit.getTotalAttack(),
                        unit.getAttackRange(), unit.getMovement());
            }
            System.out.println("0. –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ö–æ–¥");

            int choice = scanner.nextInt();
            if (choice == 0) break;
            if (choice < 1 || choice > availableUnits.size()) continue;

            BattleUnit unit = availableUnits.get(choice - 1);
            if (!unit.isAlive()) continue; // –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —É–º–µ—Ä –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
            handleUnitActions(unit, scanner);
            // –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è —é–Ω–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —É–º–µ—Ä –ª–∏ –æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —É–¥–∞—Ä–∞)
            availableUnits.remove(unit);
        }
    }

    private void handleUnitActions(BattleUnit unit, Scanner scanner) {
        while (true) {
            if (!unit.isAlive()) return; // –µ—Å–ª–∏ –ø–æ–≥–∏–± –¥–æ —Ö–æ–¥–∞
            System.out.printf("%s %s: –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ%n1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å%n2. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è%n3. –û—Ç–º–µ–Ω–∞%n",
                    unit.getEmoji(), unit.getName());
            int action = scanner.nextInt();
            if (action == 3) break;

            if (action == 1) {
                handleAttack(unit, scanner);
                unit.markActed();
                break;
            } else if (action == 2) {
                handleMovement(unit, scanner);
                unit.markActed();
                break;
            }
        }
    }

    private void handleAttack(BattleUnit attacker, Scanner scanner) {
        List<BattleUnit> targets = new ArrayList<>();
        // –ú–æ–∂–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å enemyUnits –∏ resurrectedZombies (–Ω–æ –Ω–µ —Å–µ–±—è!)
        for (BattleUnit unit : enemyUnits) {
            if (unit.isAlive() && calculateDistance(attacker, unit) <= attacker.getAttackRange() && unit != attacker) {
                targets.add(unit);
            }
        }
        for (BattleUnit unit : resurrectedZombies) {
            if (unit.isAlive() && calculateDistance(attacker, unit) <= attacker.getAttackRange() && unit != attacker) {
                targets.add(unit);
            }
        }
        if (targets.isEmpty()) {
            System.out.println("–ù–µ—Ç —Ü–µ–ª–µ–π –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏!");
            return;
        }
        System.out.println("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:");
        for (int i = 0; i < targets.size(); i++) {
            BattleUnit target = targets.get(i);
            System.out.printf("%d. %s %s (HP: %d, –ö–æ–ª-–≤–æ: %d)%n",
                    i + 1, target.getEmoji(), target.getName(),
                    target.getTotalHp(), target.getCount());
        }
        int choice = scanner.nextInt();
        if (choice < 1 || choice > targets.size()) return;
        BattleUnit target = targets.get(choice - 1);
        if (!target.isAlive() || target == attacker) return;
        target.takeDamage(attacker.getTotalAttack());
        System.out.printf("%s %s –∞—Ç–∞–∫–æ–≤–∞–ª %s %s –∏ –Ω–∞–Ω–µ—Å %d —É—Ä–æ–Ω–∞!%n",
                attacker.getEmoji(), attacker.getName(),
                target.getEmoji(), target.getName(),
                attacker.getTotalAttack());
    }

    private void handleMovement(BattleUnit unit, Scanner scanner) {
        while (true) {
            if (!unit.isAlive()) return;
            System.out.println("–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: X=" + (unit.getX() + 1) + " Y=" + (unit.getY() + 1));
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç 1 –¥–æ " + BATTLE_WIDTH + " (x y): ");
            try {
                int newX = scanner.nextInt() - 1;
                int newY = scanner.nextInt() - 1;
                if (newX < 0 || newX >= BATTLE_WIDTH || newY < 0 || newY >= BATTLE_HEIGHT) {
                    System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ–ª—è!");
                    continue;
                }
                int distance = Math.abs(newX - unit.getX()) + Math.abs(newY - unit.getY());
                if (distance > unit.getMovement()) {
                    System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤! –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏: " + unit.getMovement());
                    continue;
                }
                boolean occupied = false;
                for (BattleUnit other : allUnits()) {
                    if (other != unit && other.isAlive() && other.getX() == newX && other.getY() == newY) {
                        occupied = true;
                        break;
                    }
                }
                if (occupied) {
                    System.out.println("–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!");
                    continue;
                }
                unit.setX(newX);
                unit.setY(newY);
                System.out.println("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!");
                return;
            } catch (InputMismatchException e) {
                System.out.println("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞.");
                scanner.nextLine();
            }
        }
    }

    private List<BattleUnit> allUnits() {
        List<BattleUnit> all = new ArrayList<>(playerUnits);
        all.addAll(enemyUnits);
        all.addAll(resurrectedZombies);
        return all;
    }

    // –•–æ–¥ –≤—Ä–∞–≥–∞: —Ç–æ–ª—å–∫–æ enemyUnits!
    private void enemyTurn() {
        System.out.println("\n=== –•–û–î –ü–†–û–¢–ò–í–ù–ò–ö–ê ===");
        List<BattleUnit> aliveEnemies = new ArrayList<>();
        for (BattleUnit unit : enemyUnits) {
            if (unit.isAlive()) {
                aliveEnemies.add(unit);
                unit.resetActions();
            }
        }
        for (BattleUnit unit : aliveEnemies) {
            BattleUnit closestPlayer = findClosestPlayerUnit(unit);
            if (closestPlayer == null) continue;

            int dx = Integer.compare(closestPlayer.getX(), unit.getX());
            int dy = Integer.compare(closestPlayer.getY(), unit.getY());

            int newX = unit.getX() + Integer.signum(dx);
            int newY = unit.getY() + Integer.signum(dy);

            int dist = Math.abs(newX - unit.getX()) + Math.abs(newY - unit.getY());
            if (dist <= unit.getMovement()) {
                boolean blocked = false;
                for (BattleUnit pu : playerUnits) {
                    if (pu.isAlive() && pu.getX() == newX && pu.getY() == newY) {
                        blocked = true;
                        break;
                    }
                }
                for (BattleUnit pu : resurrectedZombies) {
                    if (pu.isAlive() && pu.getX() == newX && pu.getY() == newY) {
                        blocked = true;
                        break;
                    }
                }
                if (!blocked) {
                    unit.setX(newX);
                    unit.setY(newY);
                }
            }

            if (calculateDistance(unit, closestPlayer) <= unit.getAttackRange()) {
                closestPlayer.takeDamage(unit.getTotalAttack());
                System.out.printf("%s %s –∞—Ç–∞–∫–æ–≤–∞–ª %s %s!%n",
                        unit.getEmoji(), unit.getName(),
                        closestPlayer.getEmoji(), closestPlayer.getName());
            }
            unit.markActed();
        }
    }

    private BattleUnit findClosestPlayerUnit(BattleUnit enemyUnit) {
        BattleUnit closest = null;
        int minDistance = Integer.MAX_VALUE;
        for (BattleUnit playerUnit : getAllPlayerControlledUnits()) {
            if (!playerUnit.isAlive()) continue;
            int distance = calculateDistance(enemyUnit, playerUnit);
            if (distance < minDistance) {
                minDistance = distance;
                closest = playerUnit;
            }
        }
        return closest;
    }

    private int calculateDistance(BattleUnit a, BattleUnit b) {
        return Math.abs(a.getX() - b.getX()) + Math.abs(a.getY() - b.getY());
    }

    private void resetUnits() {
        for (BattleUnit unit : playerUnits) unit.resetActions();
        for (BattleUnit unit : enemyUnits) unit.resetActions();
        for (BattleUnit unit : resurrectedZombies) unit.resetActions();
    }

    private boolean isBattleOver() {
        boolean playerAlive = getAllPlayerControlledUnits().stream().anyMatch(BattleUnit::isAlive);
        boolean enemyAlive = enemyUnits.stream().anyMatch(BattleUnit::isAlive) || resurrectedZombies.stream().anyMatch(BattleUnit::isAlive);
        return !playerAlive || !enemyAlive;
    }

    private boolean handleBattleEnd(GameMap map) {
        List<String> fallen = new ArrayList<>();
        for (BattleUnit bu : playerUnits) {
            if (!bu.isAlive()) fallen.add(bu.getName());
        }
        hero.setLastFallenUnits(fallen);

        hero.updateArmyAfterBattle(playerUnits);

        boolean enemyDefeated = enemyUnits.stream().noneMatch(BattleUnit::isAlive) && resurrectedZombies.stream().noneMatch(BattleUnit::isAlive);

        if (enemyDefeated) {
            System.out.println("–í—Ä–∞–≥ —É–Ω–∏—á—Ç–æ–∂–µ–Ω! –ü–û–ë–ï–î–ê!");
            map.removeCharacter(enemy);
            return true;
        } else {
            System.out.println("–í–∞—à–∞ –∞—Ä–º–∏—è —Ä–∞–∑–≥—Ä–æ–º–ª–µ–Ω–∞... –ü–û–†–ê–ñ–ï–ù–ò–ï!");
            return false;
        }
    }

    private void resurrectFallenUnitsAsZombies(List<String> fallenNames) {
        resurrectedZombies.clear();
        int zombieIndex = 0;
        for (String name : fallenNames) {
            BattleUnit zombie = createZombieUnit(name);
            if (zombie != null) {
                zombie.setX(0);
                zombie.setY(1 + (playerUnits.size() + zombieIndex) * 2);
                zombieIndex++;
                resurrectedZombies.add(zombie);
            }
        }
    }

    private BattleUnit createZombieUnit(String name) {
        switch (name) {
            case "–ö–æ–ø–µ–π—â–∏–∫":
            case "–ó–æ–º–±–∏ –ö–æ–ø–µ–π—â–∏–∫":
                return new BattleUnit("–ó–æ–º–±–∏ –ö–æ–ø–µ–π—â–∏–∫", "üßü", 30, 10, 1, 1, 1);
            case "–õ—É—á–Ω–∏–∫":
            case "–ó–æ–º–±–∏ –õ—É—á–Ω–∏–∫":
                return new BattleUnit("–ó–æ–º–±–∏ –õ—É—á–Ω–∏–∫", "üßü", 20, 15, 2, 1, 1);
            case "–í—Å–∞–¥–Ω–∏–∫":
            case "–ó–æ–º–±–∏ –í—Å–∞–¥–Ω–∏–∫":
                return new BattleUnit("–ó–æ–º–±–∏ –í—Å–∞–¥–Ω–∏–∫", "üßü", 40, 15, 1, 2, 1);
            default:
                return null;
        }
    }

    private boolean isOccupied(int x, int y) {
        for (BattleUnit bu : allUnits()) {
            if (bu.isAlive() && bu.getX() == x && bu.getY() == y) return true;
        }
        return false;
    }

    private void printBattleField() {
        System.out.println("\n=== –ü–û–õ–ï –ë–û–Ø ===");
        System.out.print("   ");
        for (int x = 1; x <= BATTLE_WIDTH; x++) System.out.print(x + " ");
        System.out.println();
        for (int y = 0; y < BATTLE_HEIGHT; y++) {
            System.out.print((y + 1) + " ");
            for (int x = 0; x < BATTLE_WIDTH; x++) {
                String cell = "‚¨ú";
                for (BattleUnit unit : playerUnits) {
                    if (unit.getX() == x && unit.getY() == y && unit.isAlive()) {
                        cell = unit.getEmoji();
                    }
                }
                for (BattleUnit unit : resurrectedZombies) {
                    if (unit.getX() == x && unit.getY() == y && unit.isAlive()) {
                        cell = unit.getEmoji();
                    }
                }
                for (BattleUnit unit : enemyUnits) {
                    if (unit.getX() == x && unit.getY() == y && unit.isAlive()) {
                        cell = unit.getEmoji();
                    }
                }
                System.out.print(cell);
            }
            System.out.println();
        }
    }
}